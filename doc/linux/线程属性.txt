线程属性，posix中pthread_attr可以设置，通过pthread_attr_init初始化，pthread_attr_destroy销毁，失败会内存泄漏。线程属性可以设置分离属性，表示线程创建时就分离还是正常状态返回退出值。
同步属性，互斥量属性，同样也需要初始化，在创建互斥量时会有需要，互斥量属性包含共享属性，健壮属性和类型属性，共享属性设置为私有就是正常的，否则代表可以把同一个数据块映射到进程的地址空间。健壮属性的意思是，如果没有设置健壮，当持有锁进程退出，锁永远不释放，设置了的话，返回一个代表持有锁进程退出的错误码。类型属性，代表了锁不同情况下的反应情况，一共有四种，针对没有解锁时重新加锁，不占用时解锁，已解锁时解锁时互斥量行为的不同。
读写锁属性，只有共享属性，和互斥量属性相同。
条件变量属性，有共享属性和时钟属性，时钟属性是指等待计时的是什么时钟，实时时间，系统时间还是用户时间。
屏障属性，也只有共享属性。
线程特定数据，线程可以通过pthread_key_create创建一个关联键的值，使用pthread_once确保线程特定数据只创建一个键。记得__pthread前缀可以定义线程局部变量来着。
取消选项，可取消状态属性，用来设置线程相应pthread_cancel的行为，默认继续运行到一个取消点，这个取消点是线程检查他是否被取消的一个位置，一般出现在一批特定函数中，也可以自己设定unp362。
多线程中信号的处理，当一个进程中有多个线程，收到一个信号时，多线程共享一个信号，但是只有一个能响应，因此此时的响应是随机的，与进程中不同，多线程中每个线程有自己的屏蔽字，据APUE，多线程中信号的不确定性，应该尽量将异步信号同布化，其他线程屏蔽他，只有处理该信号的线程能够处理。
在多线程进程中fork子进程，继承父进程的地址空间，子进程中只有一个主线程，问题是如果父进程中含有加锁的文件，子进程复制空间后，也持有该锁，但是不知道锁的是什么，持有哪些锁，他本身也可能没有该文件的副本，如果fork之后直接exec当然没问题，问题是这之间发生了什么，因此规定，这之间只能运行线程安全函数，pthread_atfork帮助解决这个问题，可以在他里面注册三个函数，分别fork之前保存定义的所有锁，fork之后，返回之前，解锁，fork之后，子进程中解锁。
pread和pwrite可以使多线程读写同一个文件安全，当然要是不同部分。
