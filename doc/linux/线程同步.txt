线程之间同步方法许多，信号，互斥量，读写锁，条件变量，自旋锁，屏障。
信号是在内核空间实现的机制，每个进程描述符中都有对应的信号位图，等待，屏蔽，未决。
互斥量应该也在内核注册毕竟所有线程都必须可以访问（有待深入理解修改），使用之前加锁，使用完解锁，形成逻辑屏障，但是多个锁乱序交错使用以及反复加锁会照成死锁，解决方案是统一顺序或者在得不到锁时释放所有锁资源，过会重试。
读写锁相对于互斥锁有进步，对读远多于写的情况下用处很大，占有读锁的时候别人也能占有，占有写锁则独占，目前读锁你想写锁等待前面读锁要求屏蔽以后取锁要求。
条件变量与互斥锁一起使用，使用时先解开占有的互斥锁检查条件是否满足，一直等到超时为满足则再锁上退出。就是我等这个条件，有没有达到？没达到我放开，有人想改么？改对了我就开始了。
自旋锁与互斥量类似，但他不阻塞，他一直轮询。非抢占情况下，单cpu运行在自旋锁保护的临界区时，不能做其他事情，不能任务切换，中断会被阻塞，否则发生死锁，多CPU时其他CPU访问临界区忙等待。
屏障允许每个线程等待，知道所有合作线程达到一个点，例如pthread_join()两个线程的合作。例如可实现主线程分出许多子线程排序，主线程整合。